# -*- coding: utf-8 -*-
"""Copia de Copia de Copia de funciones anidadas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vyyl0Q-Mv_uYaNA8Ghn-KGJfCAj0HdaR
"""



"""#Funciones anidadas, es una funcion que se define dentro de otra funcion.
EJEMPLO
CRUD
CREATE-Crear/Guardar informacion
READ-Tener acceso a la info y/o mostrarla
UPDATE-Actualizar la informacion
DELETE-Eliminar la informacion

FUNCION FORMULARIO LA CUAL PUEDE CONTENER CRUD.
"""

#Funcion que me ayuda a planificar un viaje

def planificarViaje(destino):

  def reservarHotel(destino):
    #Iria el codigo que procese la reserva
    print(f"El hotel esta reservado en {destino}") #EL MENSAJE FINAL

  def transporteAldestino(destino):
    #IRIA EL CODIGO QUE HACE EL PROCESO DE RESERVACION DEL BUS, CARRO O AVION
    print(f"El transporte esta reservado hacia {destino}")

  reservarHotel(destino)
  transporteAldestino(destino)

  return reservarHotel,transporteAldestino


#planificarViaje("Cancun") #EJECUTANDO

destinoUsuario= input("Introduce el destino de tu viaje: ")

funcion= planificarViaje(destinoUsuario)

reservarHotel, transporteAldestino = funcion #Accediendo a las funciones anidadas desde afuera

reservarHotel("Colombia")

def editarTexto(texto):

  def pasarMayuscula(texto):
    return texto.upper() #Upper() me permite pasar textos a mayuscula- lower=minuscula

  def verificarLongitud(texto):
    return len(texto)>8 #True-el texto es mayor a 8 caracteres, si es menor me va devolver un False

  mayuscula=pasarMayuscula(texto) #EJECUTO LAS FUNCIONES Y LAS ALMACENO EN UNA VARIABLE
  longitud=verificarLongitud(texto)

  return mayuscula,longitud #RETORNO EL VALOR QUE GUARDAN ESAS VARIBLES

mayuscula,longitud=editarTexto("Hello World") #Puedo utilizar cada funcion de manera independiente


print("El texto en Mayuscula se ve asi: ", mayuscula)
print("Es mayor a 8 caracteres?", longitud)

def editarTexto(texto):

  def pasarMayuscula(texto):
    return texto.upper() #Upper() me permite pasar textos a mayuscula- lower=minuscula

  def verificarLongitud(texto):
    return len(texto)>8 #True-el texto es mayor a 8 caracteres, si es menor me va devolver un False

  mayuscula=pasarMayuscula(texto) #EJECUTO LAS FUNCIONES Y LAS ALMACENO EN UNA VARIABLE
  longitud=verificarLongitud(texto)

  return mayuscula,longitud #RETORNO EL VALOR QUE GUARDAN ESAS VARIBLES

digiteClave=input("ingrese la clave: ")

mayuscula,longitud=editarTexto(digiteClave) #Puedo utilizar cada funcion de manera independiente

if longitud:
  print("Clave guardada. ")
else:
  print("Tu clave tiene menos de 8 caracteres. ")

print("El texto en Mayuscula se ve asi: ", mayuscula)
print("Es mayor a 8 caracteres?", longitud)

def calculadora(num1,num2):

  def sumar(num1,num2):
    return num1+num2

  def resta(num1,num2):
    return num1-num2

  def multiplicar(num1,num2):
    return num1*num2

  def dividir(num1,num2):
    if num2 !=0: #Si es diferente a 0
      return num1/num2
    else:
      return "ERROR!!"

  sumar=sumar(num1,num2)
  resta=resta(num1,num2)
  multiplicar=multiplicar(num1,num2)
  dividir=dividir(num1,num2)

  return suma, resta, multiplicacion, division

suma=calculadora(2,3)

resultados=calculadora(4,5) #[suma, resta, multi, divi]

print("La multiplicaciones ", resultados[2])
#print("El resultado de la suma es: ", suma)

#IMITACION DE UN CRUD, GESTIONAR TAREAS

def misTareas():

  tareas= [] #Inicializar una lista vacia

  def agregarTareas():
    tarea= input("Ingrese la tarea a guardar: ") #Solicitamos la tarea al usuario.
    tareas.append(tarea) #A la lista tareas le agrego la tarea que el usuario coloque
    print(f"La tarea {tarea}, ha sido agregada. ")

  def eliminarTarea():
    tarea= input("Ingrese la tarea a Eliminar: ")
    if tarea in tareas: #PREGUNTAMOS LA TAREA QUE INGRESO EL USUARIO ESTA in LA LISTA DE TAREAS?
      tareas.remove(tarea) #A la lista tareas remuevale la tarea que ingreso el
      print(f"La tarea {tarea}, fue eliminada!")
    else:
      print(f"La tarea ingresada NO existe. ")


  def mostrarTareas():
    if tareas:  #SI HAY TAREAS
      print("Tareas Pendientes: ")
      for tarea in tareas:
        print(f"* {tarea}")
      else:
        print("No hay tareas pendientes")

  def modificarTareas():
    tarea= input("Ingrese la tarea a modificar: ")
    posicion=tareas.index(tarea) #index me devuelve la posicion de la tarea antigua
    if tarea in tareas: # SI LA TAREA SE ENCUENTRA EN LA LISTA DE TAREAS SEGUIR
      tareaNueva=input("Ingrese la tarea a actualizar: ")
      tareas[posicion]= tareaNueva #A la lista de tareas modifique la tarea seleccionada
      print(f"La tarea {tarea}, ha sido modificada. ")
    else:
      print("ERROR! tarea inexistente. ")

  while True:
    print("\n Que desea realiza? \n 1. Agregar tarea \n 2. Ver tarea \n 3. Eliminar tarea \n 4. Salir ")
    opcion= input("Ingrese el numero de la opcion que desea realizar: ") #SE ESTA ALMACENANDO COMO TEXTO

    if opcion == "1":
      agregarTareas() #Llama a la funcion agregar una tarea
    elif opcion == "2":
      mostrarTareas()
    elif opcion == "3":
      eliminarTarea()
    elif opcion == "4":
      modificarTareas()
    elif opcion == "5":
      print("Programa finalizado. ")
      break #SALGO DEL BUCLE
    else:
      print("Opcion no valida")

misTareas() #EJECUTO LA FUNCION TAREA

# CREAR UNA FUNCION ANIDADA PARA ACTUALIZAR UNA TAREA EXISTENTE
# VALIDAR SI LA TAREA A CAMBIAR EXISTE
# LE PREGUNTAMOS LA NUEVA TAREA
# ACTUALIZAMOS LA TAREA
# tareas.index(tareaAntigua) - ME DEVUELVE LA POSICION